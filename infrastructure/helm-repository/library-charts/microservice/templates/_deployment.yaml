{{/*
Microservice Deployment Template
Usage: {{ include "microservice.deployment" . }}
*/}}
{{- define "microservice.deployment" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace | default .Release.Namespace }}
  labels:
    {{- include "microservice.labels" . | nindent 4 }}
    component: {{ .Values.component | default "backend" }}
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "microservice.selectorLabels" . | nindent 6 }}
      component: {{ .Values.component | default "backend" }}
  template:
    metadata:
      labels:
        {{- include "microservice.selectorLabels" . | nindent 8 }}
        component: {{ .Values.component | default "backend" }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Values.serviceAccount.name | default .Values.name }}
      {{- end }}
      securityContext:
        {{- toYaml (.Values.security.podSecurityContext | default dict) | nindent 8 }}
      containers:
      - name: {{ .Values.name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort | default 8080 }}
          protocol: TCP
        {{- if .Values.env }}
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.envFrom }}
        envFrom:
        {{- toYaml .Values.envFrom | nindent 8 }}
        {{- end }}
        {{- if .Values.livenessProbe }}
        livenessProbe:
          {{- toYaml .Values.livenessProbe | nindent 10 }}
        {{- end }}
        {{- if .Values.readinessProbe }}
        readinessProbe:
          {{- toYaml .Values.readinessProbe | nindent 10 }}
        {{- end }}
        resources:
          {{- toYaml (.Values.resources | default dict) | nindent 10 }}
        securityContext:
          {{- toYaml (.Values.security.securityContext | default dict) | nindent 10 }}
        {{- if .Values.volumeMounts }}
        volumeMounts:
        {{- toYaml .Values.volumeMounts | nindent 8 }}
        {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
      {{- toYaml .Values.initContainers | nindent 6 }}
      {{- end }}
      {{- if .Values.volumes }}
      volumes:
      {{- toYaml .Values.volumes | nindent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}} 